<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数论</title>
      <link href="/%E6%95%B0%E8%AE%BA/"/>
      <url>/%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Dirichlet"><a href="#Dirichlet" class="headerlink" title="Dirichlet"></a>Dirichlet</h2><p>Dirichlet（狄利克雷）卷积公式：</p><p>$f(x)\ast g(x)&#x3D;\sum\limits_{d|n} f(d)g(\frac n d)$</p><p>注： $\ast$ 不是 $\times$， 读作“卷”</p><h2 id="单位函数"><a href="#单位函数" class="headerlink" title="单位函数"></a>单位函数</h2><p>$\varepsilon&#x3D;[n&#x3D;1]$</p><p>如中括号内成立则值为 $1$，反之则为 $0$。</p><p>所以$\varepsilon&#x3D;\begin{cases}<br>1&amp;n&#x3D;1 \<br>0&amp;n<br>\end{cases}$</p><p>任何函数卷单位函数都为原来的函数</p><p>$f\ast\varepsilon&#x3D;f$</p><h2 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h2><p>$\mu (n)&#x3D;\begin{cases}<br>1&amp;n&#x3D;1 \<br>0&amp;n含有平方根因子 \<br>(-1)^k&amp;k为n的不同质因数的个数<br>\end{cases}$</p><p>令 $n&#x3D;\prod\limits_{i} p_i^{c_i}$</p><p>如果$\exist x\isin c,x&gt;1$，则 $\mu(n)&#x3D;0$</p><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>$\mu \ast 1&#x3D;\varepsilon$</p><p>即 $[n&#x3D;1]&#x3D;\sum\limits_{d|n}\mu(n)$</p><p>可用组合数证明。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法详解</title>
      <link href="/KMP/"/>
      <url>/KMP/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h2><p>前缀表是查询一个字符串前缀等于后缀的数组，用 $next$ 表示。</p><p>$next_i$ 表示一个字符串 $s[1-i]$ 的最长公共前缀和后缀的长度。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>; <span class="comment">//代表现在匹配到的最长前缀的指针 </span></span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; s[i]; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j]) &#123; <span class="comment">//现在的前缀后缀不相同，则找前一位字符串的相同前缀 </span></span><br><span class="line">j=next[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j]) &#123;</span><br><span class="line">j++; <span class="comment">//前后缀相同，指针移动 </span></span><br><span class="line">&#125;</span><br><span class="line">next[i]=j; <span class="comment">//跟新 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(<span class="type">char</span> *s, <span class="type">char</span> *t, <span class="type">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_next</span>(s, next);</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; s[i]; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=t[j]) &#123;</span><br><span class="line">j=next[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==t[j]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="built_in">strlen</span>(t)) &#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
