<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性DP</title>
      <link href="/%E7%BA%BF%E6%80%A7DP/"/>
      <url>/%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p>本篇文章尚未完善。</p></div><h2 id="最长递增子序列（LIS）">最长递增子序列（LIS）</h2><h3 id="定义">定义</h3><p>在一个给定的序列中，最长递增子序列是一个递增的子序列（即子序列中的每个元素都比前一个元素大），它的长度是所有递增子序列中最长的。</p><h3 id="求解方法">求解方法</h3><ol><li><p><strong>二分查找：</strong></p><ul><li><strong>方法：</strong> 使用一个数组 <code>lis</code> 来记录当前找到的最长递增子序列的末尾元素。在遍历每个元素时，使用二分查找在 <code>lis</code> 中找到合适的位置进行更新，从而保持 <code>lis</code> 数组的递增性。</li></ul></li><li><p><strong>树状数组+离散化</strong></p><ul><li><strong>映射元素：</strong> 将序列中的元素映射到一个较小的范围内，通常使用离散化处理。这样可以避免树状数组处理大范围的索引。</li><li><strong>树状数组结构：</strong> 使用树状数组来维护每个位置的最大LIS长度。树状数组支持高效的前缀和查询以及更新操作。</li></ul></li></ol><h3 id="实现">实现</h3><p><strong>二分查找示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findLISLength</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; num)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = num.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">g</span><span class="params">(n, <span class="number">0x3f3f3f3f</span>)</span></span>; <span class="comment">// 初始化为无穷大</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">LIS</span><span class="params">(n)</span></span>; <span class="comment">// 存储每个位置的 LIS 长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max_length = <span class="number">0</span>; <span class="comment">// 存储 LIS 的最大长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 在已排序的 `g` 数组中查找 `num[i]` 的位置</span></span><br><span class="line">        <span class="type">int</span> j = <span class="built_in">lower_bound</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">begin</span>() + n, num[i]) - g.<span class="built_in">begin</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新 LIS 长度</span></span><br><span class="line">        LIS[i] = j + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新最大 LIS 长度</span></span><br><span class="line">        max_length = <span class="built_in">max</span>(max_length, LIS[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新 `g` 数组</span></span><br><span class="line">        g[j] = num[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>树状数组+离散化+恢复序列示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> size) : <span class="built_in">size</span>(size), <span class="built_in">tree</span>(size + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新操作</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= size) &#123;</span><br><span class="line">            tree[index] = <span class="built_in">max</span>(tree[index], value);</span><br><span class="line">            index += <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询操作</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> max_value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            max_value = <span class="built_in">max</span>(max_value, tree[index]);</span><br><span class="line">            index -= <span class="built_in">lowbit</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lengthOfLIS</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离散化处理</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sorted_nums = nums;</span><br><span class="line">    <span class="built_in">sort</span>(sorted_nums.<span class="built_in">begin</span>(), sorted_nums.<span class="built_in">end</span>());</span><br><span class="line">    sorted_nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(sorted_nums.<span class="built_in">begin</span>(), sorted_nums.<span class="built_in">end</span>()), sorted_nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; rank;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sorted_nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        rank[sorted_nums[i]] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建树状数组</span></span><br><span class="line">    <span class="function">BIT <span class="title">bit</span><span class="params">(sorted_nums.size())</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prev</span><span class="params">(nums.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max_length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end_index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> pos = rank[nums[i]];</span><br><span class="line">        <span class="type">int</span> lis_length = bit.<span class="built_in">query</span>(pos - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        bit.<span class="built_in">update</span>(pos, lis_length);</span><br><span class="line"></span><br><span class="line">        dp[i] = lis_length;</span><br><span class="line">        <span class="keyword">if</span> (lis_length &gt; max_length) &#123;</span><br><span class="line">            max_length = lis_length;</span><br><span class="line">            end_index = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录前驱</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[i] &amp;&amp; dp[j] + <span class="number">1</span> == dp[i]) &#123;</span><br><span class="line">                prev[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复最长递增子序列</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; lis;</span><br><span class="line">    <span class="keyword">while</span> (end_index != <span class="number">-1</span>) &#123;</span><br><span class="line">        lis.<span class="built_in">push_back</span>(nums[end_index]);</span><br><span class="line">        end_index = prev[end_index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(lis.<span class="built_in">begin</span>(), lis.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度">复杂度</h3><ul><li><strong>时间复杂度</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><h2 id="最长公共子序列（LCS）">最长公共子序列（LCS）</h2><h3 id="定义-2">定义</h3><p>最长公共子序列（Longest Common Subsequence，简称 LCS）是指在两个序列中找到的一个最长的子序列，使得它是两个序列的子序列，并且它的长度最长。子序列的定义是指从序列中删除零个或多个元素（不改变剩余元素的顺序），而不是从序列中选取连续的部分。</p><h3 id="1-定义问题">1. 定义问题</h3><ul><li><strong>目标</strong>：在两个给定序列中找到一个最长的公共子序列。子序列是指通过删除原序列中的某些字符（但不改变剩余字符的顺序）获得的序列。</li></ul><h3 id="2-动态规划方法">2. 动态规划方法</h3><p>动态规划是解决 LCS 问题的标准方法，其核心思想是将大问题分解为更小的子问题，并通过记录子问题的解来避免重复计算。</p><h4 id="步骤：">步骤：</h4><ol><li><p><strong>创建 DP 表</strong>：</p><ul><li>设 <code>X</code> 和 <code>Y</code> 是两个序列。</li><li>创建一个二维 DP 表 <code>dp</code>，其中 <code>dp[i][j]</code> 表示序列 <code>X</code> 的前 <code>i</code> 个字符和序列 <code>Y</code> 的前 <code>j</code> 个字符的 LCS 的长度。</li></ul></li><li><p><strong>初始化 DP 表</strong>：</p><ul><li>初始化 <code>dp[0][j]</code> 和 <code>dp[i][0]</code> 为 0，因为任何序列与空序列的 LCS 长度为 0。</li></ul></li><li><p><strong>填充 DP 表</strong>：</p><ul><li>遍历 DP 表的每一个位置 <code>dp[i][j]</code>：<ul><li>如果 <code>X[i-1] == Y[j-1]</code>，则 <code>dp[i][j] = dp[i-1][j-1] + 1</code>（当前字符相同，LCS 增加 1）。</li><li>否则，<code>dp[i][j] = max(dp[i-1][j], dp[i][j-1])</code>（当前字符不同，取不包括当前字符的 LCS 最大值）。</li></ul></li></ul></li><li><p><strong>获取 LCS 的长度</strong>：</p><ul><li>最终的 LCS 长度保存在 <code>dp[m][n]</code> 中，其中 <code>m</code> 和 <code>n</code> 分别是序列 <code>X</code> 和 <code>Y</code> 的长度。</li></ul></li><li><p><strong>还原 LCS</strong>：</p><ul><li>从 <code>dp[m][n]</code> 开始向上和向左追溯：<ul><li>如果 <code>X[i-1] == Y[j-1]</code>，则字符 <code>X[i-1]</code> 是 LCS 的一部分，将其加入 LCS，并移动到 <code>dp[i-1][j-1]</code>。</li><li>如果 <code>dp[i-1][j] &gt; dp[i][j-1]</code>，则移动到 <code>dp[i-1][j]</code>。</li><li>否则，移动到 <code>dp[i][j-1]</code>。</li></ul></li><li>追溯完成后，将 LCS 字符串反转（因为追溯时是从末尾开始的）。</li></ul></li></ol><p>这种方法适用于中等规模的问题，能够有效地解决 LCS 的计算和还原。</p><h3 id="实现-2">实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算 LCS 长度并填充 DP 表的函数</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">computeLCSLength</span>(<span class="type">const</span> string&amp; X, <span class="type">const</span> string&amp; Y) &#123;</span><br><span class="line">    <span class="type">int</span> m = X.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> n = Y.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充 DP 表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (X[i - <span class="number">1</span>] == Y[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 DP 表中还原 LCS 的函数</span></span><br><span class="line"><span class="function">string <span class="title">restoreLCS</span><span class="params">(<span class="type">const</span> string&amp; X, <span class="type">const</span> string&amp; Y, <span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = X.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> j = Y.<span class="built_in">size</span>();</span><br><span class="line">    string lcs;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追溯 DP 表以构建 LCS</span></span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (X[i - <span class="number">1</span>] == Y[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            lcs.<span class="built_in">push_back</span>(X[i - <span class="number">1</span>]);</span><br><span class="line">            --i;</span><br><span class="line">            --j;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">            --i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">reverse</span>(lcs.<span class="built_in">begin</span>(), lcs.<span class="built_in">end</span>()); <span class="comment">// 反转字符串，因为我们是从尾部构建的</span></span><br><span class="line">    <span class="keyword">return</span> lcs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度-2">复杂度</h3><ul><li><strong>时间复杂度</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>m</mi><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta(m \cdot n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><h2 id="最长公共递增子序列（LCIS）">最长公共递增子序列（LCIS）</h2><h3 id="定义-3">定义</h3><p>LCIS（Longest Common Increasing Subsequence，最长公共递增子序列）问题的目标是在两个给定序列中找到一个最长的公共递增子序列。不同于 LCS（Longest Common Subsequence），LCIS 不仅要求子序列是公共的，还要求它是递增的。</p><h3 id="1-定义问题-2">1. 定义问题</h3><ul><li><strong>目标</strong>：在两个给定序列 <code>A</code> 和 <code>B</code> 中找到最长的公共递增子序列。</li></ul><h3 id="2-动态规划方法-2">2. 动态规划方法</h3><p>动态规划是解决 LCIS 问题的常见方法。除了计算 LCS 长度外，还需要恢复具体的子序列。</p><h4 id="步骤：-2">步骤：</h4><ol><li><p><strong>创建 DP 表</strong>：</p><ul><li>使用二维 DP 表 <code>dp</code> 来存储子问题的解，其中 <code>dp[i][j]</code> 表示以 <code>A[i]</code> 和 <code>B[j]</code> 结尾的 LCIS 的长度。</li></ul></li><li><p><strong>初始化 DP 表</strong>：</p><ul><li>初始化一个 DP 数组 <code>dp</code>，初始值为 0。</li></ul></li><li><p><strong>填充 DP 表</strong>：</p><ul><li>遍历 <code>B</code> 中的每个元素 <code>B[j]</code>，并对 <code>A</code> 中的每个元素 <code>A[i]</code> 进行处理：<ul><li>使用一个临时变量 <code>current</code> 来跟踪 <code>dp</code> 中的最大值。</li><li>更新 DP 表：<ul><li>如果 <code>A[i] == B[j]</code>，则 <code>dp[i][j] = current + 1</code>。</li><li>如果 <code>A[i] &gt; B[j]</code>，更新 <code>current</code> 为 <code>max(current, dp[i])</code>。</li></ul></li><li>更新 <code>dp</code> 表为 <code>new_dp</code>。</li></ul></li></ul></li><li><p><strong>还原 LCIS</strong>：</p><ul><li>从 DP 表的右下角开始追溯，恢复实际的 LCIS 子序列。</li></ul></li></ol><h3 id="实现-3">实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：计算 LCIS 的长度和填充 DP 表</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">computeLCISLength</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; B) &#123;</span><br><span class="line">    <span class="type">int</span> m = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> n = B.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="type">int</span> current = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">new_dp</span><span class="params">(m, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] == B[j]) &#123;</span><br><span class="line">                new_dp[i] = current + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                new_dp[i] = dp[i];</span><br><span class="line">                <span class="keyword">if</span> (A[i] &gt; B[j]) &#123;</span><br><span class="line">                    new_dp[i] = <span class="built_in">max</span>(new_dp[i], current);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            current = <span class="built_in">max</span>(current, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp = new_dp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：还原 LCIS</span></span><br><span class="line"><span class="function">string <span class="title">restoreLCIS</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; B, <span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> j = B.<span class="built_in">size</span>();</span><br><span class="line">    string lcis;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从 DP 表的右下角开始追溯</span></span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i - <span class="number">1</span>] == B[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            lcis.<span class="built_in">push_back</span>(A[i - <span class="number">1</span>]);</span><br><span class="line">            --i;</span><br><span class="line">            --j;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">            --i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">reverse</span>(lcis.<span class="built_in">begin</span>(), lcis.<span class="built_in">end</span>()); <span class="comment">// 反转字符串，因为我们是从尾部构建的</span></span><br><span class="line">    <span class="keyword">return</span> lcis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度-3">复杂度</h3><ul><li><strong>时间复杂度：</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>m</mi><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta(m \cdot n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法详解</title>
      <link href="/KMP/"/>
      <url>/KMP/</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p>本篇文章尚未完善。</p></div><h2 id="前缀表">前缀表</h2><p>前缀表是查询一个字符串前缀等于后缀的数组，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">next</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span></span></span></span> 表示。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">next_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示一个字符串 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[1-i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 的最长公共前缀和后缀的长度。</p><h2 id="代码：">代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>; <span class="comment">//代表现在匹配到的最长前缀的指针 </span></span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; s[i]; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j]) &#123; <span class="comment">//现在的前缀后缀不相同，则找前一位字符串的相同前缀 </span></span><br><span class="line">j=next[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j]) &#123;</span><br><span class="line">j++; <span class="comment">//前后缀相同，指针移动 </span></span><br><span class="line">&#125;</span><br><span class="line">next[i]=j; <span class="comment">//跟新 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(<span class="type">char</span> *s, <span class="type">char</span> *t, <span class="type">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_next</span>(s, next);</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; s[i]; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=t[j]) &#123;</span><br><span class="line">j=next[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==t[j]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="built_in">strlen</span>(t)) &#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
